package ro.pub.cs.systems.pdsd.practicaltest02var01;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;

import android.app.Fragment;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;

public class ServerFragment extends Fragment {
	
	private EditText serverTextEditText;
	private Button bServer;
	
	private int open = 0;
	String temp = "";
	String hum = "";
	
	private ServerThread serverThread;
	
	private class CommunicationThread extends Thread {
		
		private Socket socket;
		
		public BufferedReader getReader(Socket socket) throws IOException {
			return new BufferedReader(new InputStreamReader(socket.getInputStream()));
		}
		
		public PrintWriter getWriter(Socket socket) throws IOException {
			return new PrintWriter(socket.getOutputStream(), true);
		}
		
		public CommunicationThread(Socket socket) {
			this.socket = socket;
		}
		
		@Override
		public void run() {
			try {
				/*
				HttpClient httpClient = new DefaultHttpClient();
				HttpGet httpGet = new HttpGet("http://api.openweathermap.org/data/2.5/weather?q=Bucharest,ro");
				ResponseHandler<String> responseHandlerGet = new BasicResponseHandler();
				String rez = httpClient.execute(httpGet, responseHandlerGet);
				
				Log.e("rezultat", rez);
				
				int start_temp = rez.indexOf("temp") + 6;
				int end_temp = rez.indexOf("temp_min") - 2;
				String temp = rez.substring(start_temp, end_temp);
				Log.e("temp", temp);
				
				int start_hum = rez.indexOf("humidity") + 10;
				int end_hum = rez.indexOf("wind") - 3;
				String hum = rez.substring(start_hum, end_hum);
				Log.e("hum", hum);
				*/
				Log.v("Connection", "Connection opened with "+socket.getInetAddress()+":"+socket.getLocalPort());
				BufferedReader br = getReader(socket);
				String option = br.readLine();
				PrintWriter printWriter = getWriter(socket);
				
				if (option.equals("temp"))
					printWriter.println(temp);
				else if (option.equals("humidity"))
					printWriter.println(hum);
				else
					printWriter.println(temp + ", " + hum);
				socket.close();
				Log.v("Connection Closed", "Connection closed");
			} catch (IOException ioException) {
				Log.e("Exception", "An exception has occurred: "+ioException.getMessage());
				ioException.printStackTrace();
			}
		}
	}
	
	private class ServerThread extends Thread {
		
		private boolean isRunning;
		
		private ServerSocket serverSocket;
		
		public void startServer() {
			isRunning = true;
			start();			
			Log.v("startServer()", "startServer() method invoked");
		}
		
		public void stopServer() {
			isRunning = false;
			try {
				serverSocket.close();
			} catch(IOException ioException) {
				Log.e("Exception", "An exception has occurred: "+ioException.getMessage());
				ioException.printStackTrace();
			}
			Log.v("stopServer", "stopServer() method invoked");
		}
		
		@Override
		public void run() {
			try {
				int port = Integer.parseInt(serverTextEditText.getText().toString());
				serverSocket = new ServerSocket(port);
				while (isRunning) {
					Socket socket = serverSocket.accept();
					new CommunicationThread(socket).start();
				}
			} catch (IOException ioException) {
				Log.e("Exception", "An exception has occurred: "+ioException.getMessage());
				ioException.printStackTrace();
			}
		}
	}	
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle state) {
		return inflater.inflate(R.layout.fragment_server, parent, false);
	}
	
	public class Asculta implements View.OnClickListener{

		@Override
		public void onClick(View v) {
			
			if (open == 0) {
				serverThread = new ServerThread();	
				serverThread.startServer();
				
				try {
					HttpClient httpClient = new DefaultHttpClient();
					HttpGet httpGet = new HttpGet("http://api.openweathermap.org/data/2.5/weather?q=Bucharest,ro");
					ResponseHandler<String> responseHandlerGet = new BasicResponseHandler();
					String rez = httpClient.execute(httpGet, responseHandlerGet);
				
					Log.e("rezultat", rez);
				
					int start_temp = rez.indexOf("temp") + 6;
					int end_temp = rez.indexOf("temp_min") - 2;
					temp = rez.substring(start_temp, end_temp);
					Log.e("temp", temp);
				
					int start_hum = rez.indexOf("humidity") + 10;
					int end_hum = rez.indexOf("wind") - 3;
					hum = rez.substring(start_hum, end_hum);
					Log.e("hum", hum);
				} catch (Exception e) {
					e.printStackTrace();
				}
				
				open = 1;
			}
			else {
				serverThread.stopServer();
				open = 0;
			}
			
		}
		
	}
	
	@Override
	public void onActivityCreated(Bundle state) {
		super.onActivityCreated(state);
		
		serverTextEditText = (EditText)getActivity().findViewById(R.id.etServer);
		bServer = (Button)getActivity().findViewById(R.id.bServer);
		
		Asculta asc = new Asculta();
		bServer.setOnClickListener(asc);
	}	
	
}